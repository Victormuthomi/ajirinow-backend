from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.http import JsonResponse

from .utils import lipa_na_mpesa_online
from payments.models import Payment
from accounts.models import User


class STKPushView(APIView):
    def post(self, request):
        phone = request.data.get("phone")
        amount = request.data.get("amount")

        if not phone or not amount:
            return Response({"error": "Phone and amount are required"}, status=400)

        try:
            result = lipa_na_mpesa_online(phone, int(amount))

            if result.get("ResponseCode") == "0":
                Payment.objects.create(
                    user=request.user if request.user.is_authenticated else None,
                    phone=phone,
                    amount=amount,
                    merchant_request_id=result["MerchantRequestID"],
                    checkout_request_id=result["CheckoutRequestID"],
                    status="Pending",
                    description=result.get("CustomerMessage", "")
                )

            return Response(result)

        except Exception as e:
            return Response({"error": str(e)}, status=500)

class STKCallbackView(APIView):
    def post(self, request):
        data = request.data

        try:
            body = data.get("Body", {})
            stk_callback = body.get("stkCallback", {})

            merchant_request_id = stk_callback.get("MerchantRequestID")
            checkout_request_id = stk_callback.get("CheckoutRequestID")
            result_code = stk_callback.get("ResultCode")
            result_desc = stk_callback.get("ResultDesc")

            try:
                payment = Payment.objects.get(checkout_request_id=checkout_request_id)
            except Payment.DoesNotExist:
                logger.warning(f"Payment with CheckoutRequestID {checkout_request_id} not found.")
                return Response({"message": "Payment not found"}, status=404)

            if result_code == 0:
                payment.status = "Completed"
                payment.description = result_desc
            else:
                payment.status = "Failed"
                payment.description = result_desc

            payment.save()

            return Response({"message": "Callback processed"}, status=200)

        except Exception as e:
            logger.error(f"Callback error: {str(e)}")
            return Response({"error": str(e)}, status=500)

